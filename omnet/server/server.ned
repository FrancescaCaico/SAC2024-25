import org.omnetpp.queueing.Queue;
import org.omnetpp.queueing.Sink;
import org.omnetpp.queueing.Source; 
import org.omnetpp.queueing.Delay; 

//  DELAY --> IN[], OUT 
//  SOURCE --> OUT
//  SINK --> IN[]
//  QUEUE --> IN[] , OUT

// STIMA DELLE UTILIZZAZIONI --> LAMBDA/MU 
// NET --> 6/20 = 0.3   - CPU --> 6/10 = 0.6    DISCO --> 6/15 = 0,4
// STIMA DEI TEMPI DI RISPOSTA 
// -- Tr_NET =  1/(20-6) = 0,071428571 
// -- Tr_CPU =  1/(10-6) = 0,25
// -- Tr_DISK =  1/(15-6) = 0,111111111

// #lambda	ResponseTime	    sigma(ResponseTime)	    UtilizationNet	    sigma(UtilizationNet)	UtilizationCPU	    sigma(UtilizationCPU)	UtilizationDisk	    sigma(UtilizationDisk)
// 6.0	    0.434831258407182	0.0016207369101978305	0.301636952677224	0.0014278612637812686	0.601819184880976	0.0012009208133370011	0.40068597571043396	0.000872775272235666

// LA CPU È IL COLLO DI BOTTIGLIA --> HA UN UTILIZZAZIONE PIU ALTA E UN TEMPO DI RISPOSTA MAGGIORE RISPETTO ALLE ALTRE COMPONENTI

// diversi intervalli di lambda 
// (20, ∞)  --> NON PUÒ ESSERE PIU ALTO DI MU = 20 --> NO
// (10, 13.759)   --> NON PUÒ ESSERE PIU ALTO DI MU = 10 --> NO
// (15, 19.054)   --> NON PUÒ ESSERE PIU ALTO DI 15 =  --> NO
// (-∞, 7.90126)  --> UNICO POSSIBILE LAMBDA = 7.90126


network server {
    parameters: 
        double lambda = default(6.0);
        double mu_net = default(20); 
        double mu_cpu = default(10); 
        double mu_disk = default(15); 

        src.interArrivalTime = 1s*exponential(1/lambda); 
        net.serviceTime = 1s * exponential(1/mu_net); 
        cpu.serviceTime = 1s * exponential(1/mu_cpu); 
        disk.serviceTime = 1s * exponential(1/mu_disk); 


    submodules:
        src : Source; 
        net: Queue; 
        cpu: Queue; 
        disk : Queue; 
        sink : Sink;

    connections: 
        src.out -->net.in++; 
        net.out --> cpu.in++; 
        cpu.out --> disk.in++; 
        disk.out --> sink.in++; 

}

// #lambda	ResponseTime	sigma(ResponseTime)	UtilizationNet	sigma(UtilizationNet)	UtilizationCPU	sigma(UtilizationCPU)	UtilizationDisk	sigma(UtilizationDisk)
// 6.0	0.434831258407182	0.0016207369101978305	0.301636952677224	0.0014278612637812686	0.601819184880976	0.0012009208133370011	0.40068597571043396	0.000872775272235666
// 6.5	0.47356528389422603	0.004600634803452308	0.32536149150163995	0.0006999334359568753	0.647587454472702	0.0034820156012740563	0.433071128181608	0.0017627513762975926
// 6.7	0.49815074911787594	0.0016463541735758124	0.33489828670986005	0.0012981053909347593	0.6685897918885539	0.0027227112094613515	0.44714817807609003	0.0014457480266515644
// 6.8	0.51056034908336	0.003554960510604577	0.340631017438262	0.0019497627248693022	0.6798661762273641	0.004016178419926222	0.45419092044664	0.0015656358581736735
// 6.9	0.527679087772588	0.008245203502010093	0.345634763020148	0.003252351370514892	0.6917733231399879	0.0033709585941082945	0.461180688193632	0.004144679331723611
// 7.1	0.5495194099849441	0.008080048850280328	0.35568507852111797	0.002184780424397561	0.7114936112654561	0.00450312523141848	0.474802574376748	0.00456453845188106
// 7.2	0.5598540059474401	0.009795256089026661	0.359669404182706	0.0025487928625649867	0.719614893138306	0.006528331437985119	0.47872222957960797	0.0025767269070617687
// 7.3	0.577769909902792	0.006563592108925243	0.36636126776171996	0.0009394711975906522	0.730125224395622	0.0017244796422323577	0.487700596440978	0.002593068313181573
// 7.4	0.597145393826756	0.012555749108580523	0.37062076921193804	0.0015647388581738716	0.740433349232892	0.00468701956589855	0.49444531777809997	0.0018520978663498322
// 7.5	0.617637641177664	0.007215851968598857	0.37505264234827196	0.002372525350048717	0.7503414754119759	0.00268526899444426	0.501948507420924	0.001993523755237884
// 7.6	0.6328431214962119	0.00969286919265266	0.380174455832044	0.0018760922302233003	0.759486715602988	0.0039640963878524605	0.506570955306584	0.0010555745184485205
// 7.7	0.6573054045070179	0.012367041183226481	0.38542949136042204	0.003093309875207637	0.770954602507716	0.006222368318185104	0.513539446606148	0.0016275158727571985
// 7.8	0.67794211317741	0.013029977807426336	0.390075579123254	0.0022114682538425185	0.78192871324363	0.0043439348989683865	0.520954194579244	0.0020581049591581577
// 7.9	0.701878650024598	0.010124995960346238	0.39459156171245396	0.002105906260763472	0.789937811181708	0.0023774695604213887	0.527607944341256	0.0029588161528776814
// 7.90126	0.700949239801582	0.009996684357276778	0.394609124068172	0.0021738636895617704	0.79161473248123	0.0033190277947563354	0.52800318636575	0.00202214920469922
// 7.95	0.718603373807758	0.018228786703956782	0.396844448258376	0.0009301074954649719	0.795045977467204	0.0027753085782480135	0.529647609628302	0.001584179212317041
// 8.0	0.7218326539643641	0.009503136388900194	0.399996259200244	0.0012104961764664505	0.8002507426094141	0.0037845428275517807	0.5332774290971221	0.0013342491901552453
// 8.1	0.772227663930312	0.025202590786443886	0.40721900180173	0.002115477881858475	0.8137994118038281	0.005673153894529195	0.541441338746702	0.0014367919665333776
// 8.2	0.78888697841263	0.013142827735192424	0.41126941932301603	0.0014977066917015714	0.82193366735345	0.0020735294945746553	0.546779427944472	0.0016081058624561977
// 8.3	0.8285479801534861	0.01600641789265507	0.41598142181024605	0.0023733852514004057	0.831301877874958	0.0026906651943211174	0.5543083735588901	0.0018673564225080758
